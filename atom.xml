<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Korea Deveoper Support Team Blog</title>
  
  <subtitle>개발기술지원팀의 블로그입니다.</subtitle>
  <link href="https://kocssds.github.io/atom.xml" rel="self"/>
  
  <link href="https://kocssds.github.io/"/>
  <updated>2021-07-27T12:51:21.169Z</updated>
  <id>https://kocssds.github.io/</id>
  
  <author>
    <name>korea Developer Support Team</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Azure DevOps를 이용하여 Spring Boot 앱을 Linux VM에 배포하기</title>
    <link href="https://kocssds.github.io/2021/07/27/DeployAppToLinuxVM/"/>
    <id>https://kocssds.github.io/2021/07/27/DeployAppToLinuxVM/</id>
    <published>2021-07-27T12:37:58.000Z</published>
    <updated>2021-07-27T12:51:21.169Z</updated>
    
    <content type="html"><![CDATA[<p>다음은 Azure DevOps Pipeline을 이용하여 Spring Boot App을 Linux VM에 배포하는 시나리오의 예제입니다. Linux VM은 Azure DevOps의 Environments에 등록하여 구성합니다.</p><h3 id="Azure-환경에서-Linux-VM-생성"><a href="#Azure-환경에서-Linux-VM-생성" class="headerlink" title="Azure 환경에서 Linux VM 생성"></a><strong>Azure 환경에서 Linux VM 생성</strong></h3><ol><li>   Azure 포털에 로그온 합니다. </li><li>   좌측 메뉴에서 Create a resource에서 Virtual Machine을 생성합니다. </li><li>   Resource Group, Region그리고, Virtual Machine Name을 입력합니다. </li><li>   Image는 Ubuntu Server 18.04 LTS를 선택합니다. </li><li>   Inbound port rules에서 SSH(22) 포트를 오픈합니다. </li><li>   Review+Create를 통해 Linux VM을 생성합니다. </li><li>   생성시에 SSH key (.pem 파일)을 download 하는 데, 적당한 local folder에 저장합니다. 해당 키를 가지고, 해당 VM에 SSH로 접근할 수 있습니다. </li></ol><h3 id="Azure-DevOps-Repo의-구성"><a href="#Azure-DevOps-Repo의-구성" class="headerlink" title="Azure DevOps Repo의 구성"></a><strong>Azure DevOps Repo의 구성</strong></h3><ol><li>   Azure DevOps 포털에 로그온 합니다.</li><li>   New Project를 선택하여 새로운 Project를 생성합니다. </li><li>   생성된 Project로 들어가서 좌측의 Repos메뉴를 선택합니다. </li><li>   이후 Import a Repository 부분에서 사용하고자 하는 Spring Boot 예제를 import 하여 구성합니다. (예, <a href="https://github.com/spring-guides/gs-spring-boot.git">https://github.com/spring-guides/gs-spring-boot.git</a>  )</li></ol><h3 id="Azure-DevOps의-Environments에-Linux-VM-추가"><a href="#Azure-DevOps의-Environments에-Linux-VM-추가" class="headerlink" title="Azure DevOps의 Environments에 Linux VM 추가"></a><strong>Azure DevOps의 Environments에 Linux VM 추가</strong></h3><ol><li>   Azure DevOps 포털에 로그온 합니다. </li><li>   기 생성된 Project의 좌측 메뉴에서 Pipelines 하위의 Environments를 선택합니다. </li><li>   New environment를 선택합니다. </li><li>   New environment에서 Name(예, “linuxVM”)을 입력하여 Resource는 Virtual Machines를 선택합니다. </li><li>   Virtual machine resource에서 Provider는 Generic provider를 선택하고, OS는 Linux를 선택한 후 Registration script를 copy 합니다.</li><li>   앞서서 생성한 Linux VM에 SSH로 로그온 합니다. </li><li>   5번에서 copy 한 script를 paste 하여 실행합니다. </li><li>   정상적으로 script가 실행이 되었다면, Azure DevOps Environments에 4번에서 입력한 Name (예, “linuxVM”)으로 등록이 됩니다.</li><li>   추가적으로 SSH로 VM에 로그온 된 상태에서 “/lib/artifacts/” 폴더를 생성합니다. (해당 폴더는 Azure Pipeline을 통해서 배포된 Artifacts (jar 파일)를 copy 할 대상 폴더로 사용할 예정입니다.)</li><li>   Spring Boot App실행을 위해 Java Runtime Environment(JRE)를 설치합니다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y default-jre</span><br></pre></td></tr></table></figure></li></ol><h3 id="Linux-VM에서-추가-Port-오픈"><a href="#Linux-VM에서-추가-Port-오픈" class="headerlink" title="Linux VM에서 추가 Port 오픈"></a><strong>Linux VM에서 추가 Port 오픈</strong></h3><ol><li>   Azure 포털에서 이전 단계에서 생성한 VM 환경으로 들어갑니다.</li><li>   Settings의 Networking메뉴를 선택하고, 이후 Add Inbound Port Rule을 선택합니다.</li><li>   Source Port range는 “*”, Destination Port는 “8080”, Source 와 Destination을 둘 다 Any로 선택하고, TCP에 대해서 “Allow”로써 추가합니다.</li><li>   이후 TCP 8080 포트가 오픈 됩니다.</li></ol><h3 id="Azure-Pipeline의-구성"><a href="#Azure-Pipeline의-구성" class="headerlink" title="Azure Pipeline의 구성"></a><strong>Azure Pipeline의 구성</strong></h3><ol><li>   Environments에 Linux VM이 추가가 되었다면 다시 pipelines에서 New Pipeline을 선택합니다. </li><li>   Azure Repos Git을 선택하여 이전 단계에서 구성한 Repo를 선택합니다. </li><li>   Configure your pipeline 단계에서는 Repo에 구성된 소스를 컴파일하기 위해 Maven (build your java project and run tests with Apache Maven)을 선택합니다. </li><li>   프로젝트 내에 azure-pipelines.yml 파일이 자동 생성되고, 아래와 같이 내용을 추가합니다.<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">trigger:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">stage:</span> <span class="string">Build</span></span><br><span class="line">    <span class="attr">displayName:</span> <span class="string">Build</span> <span class="string">Stage</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">job:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">displayName:</span> <span class="string">Build</span> <span class="string">Maven</span> <span class="string">Project</span></span><br><span class="line">        <span class="attr">steps:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">Maven@3</span></span><br><span class="line">            <span class="attr">displayName:</span> <span class="string">&#x27;Maven Package&#x27;</span></span><br><span class="line">            <span class="attr">inputs:</span></span><br><span class="line">              <span class="attr">mavenPomFile:</span> <span class="string">&#x27;complete/pom.xml&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">task:</span> <span class="string">CopyFiles@2</span></span><br><span class="line">            <span class="attr">displayName:</span> <span class="string">&#x27;Copy Files to artifact staging directory&#x27;</span></span><br><span class="line">            <span class="attr">inputs:</span></span><br><span class="line">              <span class="attr">SourceFolder:</span> <span class="string">&#x27;$(System.DefaultWorkingDirectory)&#x27;</span></span><br><span class="line">              <span class="attr">Contents:</span> <span class="string">&#x27;**/target/*.?(war|jar)&#x27;</span></span><br><span class="line">              <span class="attr">TargetFolder:</span> <span class="string">$(Build.ArtifactStagingDirectory)</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">upload:</span> <span class="string">$(Build.ArtifactStagingDirectory)</span></span><br><span class="line">            <span class="attr">artifact:</span> <span class="string">drop</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">deployment:</span> <span class="string">DeployWeb</span></span><br><span class="line">      <span class="attr">displayName:</span> <span class="string">deploy</span> <span class="string">Web</span> <span class="string">App</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">vmImage:</span> <span class="string">&#x27;Ubuntu-latest&#x27;</span></span><br><span class="line">      <span class="comment"># creates an environment if it doesn&#x27;t exist</span></span><br><span class="line">      <span class="attr">environment:</span> </span><br><span class="line">       <span class="attr">name:</span> <span class="string">&#x27;linuxVM&#x27;</span></span><br><span class="line">       <span class="attr">resourceType:</span> <span class="string">VirtualMachine</span></span><br><span class="line">      <span class="attr">strategy:</span>        </span><br><span class="line">        <span class="attr">runOnce:</span></span><br><span class="line">          <span class="attr">deploy:</span></span><br><span class="line">            <span class="attr">steps:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">                sudo cp $(Pipeline.Workspace)/drop/**/target/*.jar /lib/artifacts/</span></span><br><span class="line"><span class="string">                sudo java -jar /lib/artifacts/*.jar &gt;/dev/null 2&gt;&amp;1 &amp;</span></span><br></pre></td></tr></table></figure></li><li>   Run 합니다. </li><li>   정상적으로 Azure Pipeline이 처리가 되었다면, Linux VM의 Public Ip를 통해 실행 중인 Spring Boot App을 접근할 수 있습니다. </li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;다음은 Azure DevOps Pipeline을 이용하여 Spring Boot App을 Linux VM에 배포하는 시나리오의 예제입니다. Linux VM은 Azure DevOps의 Environments에 등록하여 구성합니다.&lt;/p&gt;
&lt;h3 id</summary>
      
    
    
    
    
    <category term="Azure DevOps" scheme="https://kocssds.github.io/tags/Azure-DevOps/"/>
    
    <category term="Linux" scheme="https://kocssds.github.io/tags/Linux/"/>
    
    <category term="QuickStart" scheme="https://kocssds.github.io/tags/QuickStart/"/>
    
  </entry>
  
  <entry>
    <title>Azure DevOps를 이용하여 Spring Boot 앱을 Azure Virtual Machine Scale Set(VMSS)에 배포하기</title>
    <link href="https://kocssds.github.io/2021/07/22/DeployApptoVMSS/"/>
    <id>https://kocssds.github.io/2021/07/22/DeployApptoVMSS/</id>
    <published>2021-07-22T06:17:58.000Z</published>
    <updated>2021-07-22T07:05:44.118Z</updated>
    
    <content type="html"><![CDATA[<p>다음은 Azure DevOps Pipeline을 이용하여 간단한 Spring Boot 앱을 빌드하여 Azure Blob Storage에 배포한 후에 Custom Script Extension을 이용하여 VMSS에 해당 앱을 설치하는 과정을 단계별로 실습해 볼 수 있습니다. 아래의 단계는 업무에 사용될 수 있는 완벽한 예제는 아니며, VMSS에 Java 앱을 배포하는 여러가지 방법 중에 한가지 아이디어로써 참고하실 수 있습니다.</p><h3 id="Storage-Account의-생성"><a href="#Storage-Account의-생성" class="headerlink" title="Storage Account의 생성"></a><strong>Storage Account의 생성</strong></h3><hr><ol><li>   Azure 포털에 로그온 합니다. </li><li>   좌측 메뉴에서 Create Resource를 선택합니다.</li><li>   찾기에서 Storage Account찾아 선택합니다. </li><li>   생성 시, 새로운 resource group을 만들고, 임의의 Storage Account의 이름을 입력한 후, 적당한 Region을 선택하여 생성합니다. </li><li>   생성이 완료된 후, Storage Account로 들어가서 새로운 container를 추가합니다. </li><li>   Container 생성시, Public Access Level을 Blob으로 선택하여 생성합니다. </li></ol><h3 id="Azure-DevOps-Repo의-구성"><a href="#Azure-DevOps-Repo의-구성" class="headerlink" title="Azure DevOps Repo의 구성"></a><strong>Azure DevOps Repo의 구성</strong></h3><hr><ol><li>   Azure DevOps 포털에 로그온 합니다.</li><li>   New Project를 선택하여 새로운 Project를 생성합니다. </li><li>   생성된 Project로 들어가서 좌측의 Repos메뉴를 선택합니다. </li><li>   이후 Import a Repository 부분에서 사용하고자 하는 Spring Boot 예제를 import 하여 구성합니다. (예, <a href="https://github.com/spring-guides/gs-spring-boot.git">https://github.com/spring-guides/gs-spring-boot.git</a>  )</li></ol><h3 id="Azure-DevOps-Service-Connection-추가"><a href="#Azure-DevOps-Service-Connection-추가" class="headerlink" title="Azure DevOps Service Connection 추가"></a><strong>Azure DevOps Service Connection 추가</strong></h3><hr><ol><li>   이전 단계에서 생성된 Project의 Project settings에 들어갑니다.</li><li>   Service Connections에서 새로운 Service Connection을 생성합니다. </li><li>   New Service Connection에서 Azure Resource Manager를 선택합니다. </li><li>   Authentication Metod는 Service principal (automatic)을 선택한 후 다음을 누릅니다.</li><li>   Scope level은 Subscription으로 선택하고 Subscription, Resource Group(기존에 생성한 Resource Group을 선택) 그리고, Service Connection 이름을 입력하고 저장합니다.</li></ol><h3 id="Azure-DevOps-Pipeline의-구성"><a href="#Azure-DevOps-Pipeline의-구성" class="headerlink" title="Azure DevOps Pipeline의 구성"></a><strong>Azure DevOps Pipeline의 구성</strong></h3><hr><ol><li>   Project내에서Pipelines를 선택하고 Create Pipeline을 선택합니다.</li><li>   Azure Repos Git을 선택하여 이전 단계에서 구성한 Repo를 선택합니다. </li><li>   Configure your pipeline 단계에서는 Repo에 구성된 소스를 컴파일하기 위해 Maven (build your java project and run tests with Apache Maven)을 선택합니다. </li><li>   프로젝트 내에 azure-pipelines.yml 파일이 자동 생성되고, 아래와 같이 내용을 추가합니다.<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">trigger:</span></span><br><span class="line"><span class="bullet">-</span> <span class="literal">no</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pool:</span></span><br><span class="line">  <span class="attr">vmImage:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">Maven@3</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">mavenPomFile:</span> <span class="string">&#x27;pom.xml&#x27;</span></span><br><span class="line">    <span class="attr">mavenOptions:</span> <span class="string">&#x27;-Xmx3072m&#x27;</span></span><br><span class="line">    <span class="attr">javaHomeOption:</span> <span class="string">&#x27;JDKVersion&#x27;</span></span><br><span class="line">    <span class="attr">jdkVersionOption:</span> <span class="string">&#x27;1.8&#x27;</span></span><br><span class="line">    <span class="attr">jdkArchitectureOption:</span> <span class="string">&#x27;x64&#x27;</span></span><br><span class="line">    <span class="attr">publishJUnitResults:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testResultsFiles:</span> <span class="string">&#x27;**/surefire-reports/TEST-*.xml&#x27;</span></span><br><span class="line">    <span class="attr">goals:</span> <span class="string">&#x27;package&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">CopyFiles@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Copy Files to: $(build.artifactstagingdirectory)&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">SourceFolder:</span> <span class="string">&#x27;$(system.defaultworkingdirectory)&#x27;</span></span><br><span class="line">    <span class="attr">Contents:</span> <span class="string">&#x27;**/*.?(jar|sh)&#x27;</span></span><br><span class="line">    <span class="attr">TargetFolder:</span> <span class="string">&#x27;$(build.artifactstagingdirectory)&#x27;</span></span><br><span class="line">    <span class="attr">flattenFolders:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">succeededOrFailed()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">PublishBuildArtifacts@1</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Publish Artifact: drop&#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">PathtoPublish:</span> <span class="string">&#x27;$(build.artifactstagingdirectory)&#x27;</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">succeededOrFailed()</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">task:</span> <span class="string">AzureCLI@2</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&#x27;Azure CLI &#x27;</span></span><br><span class="line">  <span class="attr">inputs:</span></span><br><span class="line">    <span class="attr">azureSubscription:</span> <span class="string">&#x27;$(AZURE_SUBSCRIPTION)&#x27;</span></span><br><span class="line">    <span class="attr">scriptType:</span> <span class="string">bash</span></span><br><span class="line">    <span class="attr">scriptLocation:</span> <span class="string">inlineScript</span></span><br><span class="line">    <span class="attr">inlineScript:</span> <span class="string">&#x27;az storage blob upload-batch --destination artifacts --source $(build.artifactstagingdirectory) --account-name $AZURE_STORAGE_ACCOUNT&#x27;</span></span><br></pre></td></tr></table></figure></li><li>   Maven에 의해서 생성된 Task 외에 Copy Files, Publish Build Artifacts, 그리고, Azure CLI task를 차례로 추가합니다. 특히, Azure CLI task에서는 Maven Task에서 생성된 Artifacts를 지정된 Azure Blob Storage에 업로드를 합니다. </li><li>   Variables에 AZURE_SUBSCRIPTION과 AZURE_STORAGE_ACCOUNT를 추가하고, 앞서서 추가한 Service Connection과 Storage Account이름을 값으로 각각 입력합니다. </li><li>   Run합니다. </li><li>   문제가 없다면, Maven을 통해 생성된 (예를 들어, spring-boot-0.0.1-SNAPSHOT.jar) jar 파일이 지정된 Blob Storage에 업로드가 됩니다. </li></ol><h3 id="Shell-Script-파일의-추가"><a href="#Shell-Script-파일의-추가" class="headerlink" title="Shell Script 파일의 추가"></a><strong>Shell Script 파일의 추가</strong></h3><hr><ol><li>   Azure DevOps 포털에 로그온 합니다. </li><li>   이전 단계에서 생성한 Project 내의 Repos의 Files로 이동합니다. </li><li>   기존의 소스 폴더에 Shell Script 파일(.sh 파일)을 생성합니다.</li><li>   아래와 같이 내용을 추가합니다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">sudo apt-get update -y</span><br><span class="line">sudo apt-get install -y default-jre</span><br><span class="line">java -jar spring-boot-0.0.1-SNAPSHOT.jar &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></li><li>   저장한 후 다시 build Pipeline을 Run 합니다.</li><li>   문제가 없다면, 지정된 Azure Blob Storage에 jar 파일과 더불어 .sh 파일이 업로드가 됩니다.</li></ol><h3 id="Azure-Virtual-Machine-Scale-Set-VMSS-의-구성"><a href="#Azure-Virtual-Machine-Scale-Set-VMSS-의-구성" class="headerlink" title="Azure Virtual Machine Scale Set (VMSS)의 구성"></a><strong>Azure Virtual Machine Scale Set (VMSS)의 구성</strong></h3><hr><ol><li>   Azure 포털에 로그온 합니다.</li><li>   좌측 메뉴에서 Create resource를 선택합니다.</li><li>   찾기 메뉴에서 Virtual Machine Scale Set을 찾아 선택합니다. </li><li>   생성시 기존에 생성한 Storage Account와 동일한 Resource Group을 선택합니다. </li><li>   Virtual Machine Scale Set name을 입력하고, Resource Group이 위치한 Region을 선택합니다. </li><li>   Ubuntu Server 20.04 LTS를 선택합니다. </li><li>   Networking에서 “Edit Network Interface”을 클릭하고, (간단한 Spring Boot 예제의 실행 테스트를 위해서) Public Ip Address를 enable 한 후 OK를 누릅니다. </li><li>   Management에서 Upgrade Policy는 Automatic으로 선택합니다.</li><li>   Review+Create를 선택하여 VMSS를 생성합니다. </li></ol><h3 id="Azure-Virtual-Machine-Scale-Set-VMSS-Port-오픈"><a href="#Azure-Virtual-Machine-Scale-Set-VMSS-Port-오픈" class="headerlink" title="Azure Virtual Machine Scale Set (VMSS) Port 오픈"></a><strong>Azure Virtual Machine Scale Set (VMSS) Port 오픈</strong></h3><hr><ol><li>   Azure 포털에서 이전 단계에서 생성한 VMSS 환경으로 들어갑니다.</li><li>   Settings의 Networking메뉴를 선택하고, 이후 Add Inbound Port Rule을 선택합니다.</li><li>   Source Port range는 “*”, Destination Port는 “8080”, Source 와 Destination을 둘 다 Any로 선택하고, TCP에 대해서 “Allow”로써 추가합니다.</li><li>   이후 TCP 8080 포트가 오픈됩니다.</li></ol><h3 id="Azure-DevOps의-Release-Pipeline구성"><a href="#Azure-DevOps의-Release-Pipeline구성" class="headerlink" title="Azure DevOps의 Release Pipeline구성"></a><strong>Azure DevOps의 Release Pipeline구성</strong></h3><hr><ol><li>   Azure DevOps 포털에 로그온 합니다.</li><li>   해당 Project로 들어가서 좌측의 Release 메뉴를 선택합니다. 이후 New Pipeline을 생성합니다. </li><li>   Empty Job을 선택합니다. </li><li>   Agent Job에서 Agent Specification을 ubuntu-20.04 로 선택합니다.</li><li>   Agent Job에 Azure CLI task를 추가합니다. </li><li>   Azure CLI task에서 Azure Resource Manager Connection은 이전 단계에서 생성한 Service Connection을 선택합니다. </li><li>   Script Type은Shell 로 선택합니다. </li><li>   Script Location은 inline script로 선택하고, 아래의 script를 추가합니다. <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">az vmss extension set --resource-group vmss_rg --vmss-name vmssmachines --name customScript --publisher Microsoft.Azure.Extensions --version 2.0 --extension-instance-name JarExt --settings &#x27;&#123;&quot;fileUris&quot;: [&quot;https://myvmssstorage.blob.core.windows.net/artifacts/deploy.sh&quot;, &quot;https://myvmssstorage.blob.core.windows.net/artifacts/spring-boot-0.0.1-SNAPSHOT.jar&quot;],&quot;commandToExecute&quot;: &quot;./deploy.sh&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure></li><li>   Create Release를 통해 deploy를 합니다. </li><li>   이전 Build Pipeline을 통해 업로드가 된 jar 파일과 shell script로 구성된 <a href="https://docs.microsoft.com/en-us/azure/virtual-machines/extensions/custom-script-linux">Custom Script Extension</a>이 지정된 VMSS에 설치가 되고 Automatic Upgrade Policy에 의해 자동 업데이트가 됩니다.</li><li>   정상적으로 설치가 완료되면, VMSS에서 관리 중인 임의의 VM에 대한 지정된 Public IP와 8080 port를 이용해 Spring Boot 앱에 접근 테스트를 합니다. </li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;다음은 Azure DevOps Pipeline을 이용하여 간단한 Spring Boot 앱을 빌드하여 Azure Blob Storage에 배포한 후에 Custom Script Extension을 이용하여 VMSS에 해당 앱을 설치하는 과정을 단계별</summary>
      
    
    
    
    
    <category term="Azure DevOps" scheme="https://kocssds.github.io/tags/Azure-DevOps/"/>
    
    <category term="QuickStart" scheme="https://kocssds.github.io/tags/QuickStart/"/>
    
    <category term="VMSS" scheme="https://kocssds.github.io/tags/VMSS/"/>
    
  </entry>
  
  <entry>
    <title>Azure Pipeline에서의 로그 확인</title>
    <link href="https://kocssds.github.io/2021/07/14/AzureDevOpsLogExtract/"/>
    <id>https://kocssds.github.io/2021/07/14/AzureDevOpsLogExtract/</id>
    <published>2021-07-14T05:10:37.000Z</published>
    <updated>2021-07-22T06:45:29.308Z</updated>
    
    <content type="html"><![CDATA[<p>Azure DevOps Pipeline에서 실패가 보고된다면, 가장 먼저 확인해야 하는 부분은 로그 부분일 것이다. </p><p><img src="/images/2021-07-14-14-19-10.png"></p><p>실패한 파이프라인을 클릭하고, 확인하고자 원하는 시간에 수행된 Build Pipeline을 선택하여 클릭한다.</p><p><img src="/images/2021-07-14-14-21-44.png"></p><p>그리고, 우측상단의 풀다운 메뉴를 크릭하면, 문제가 발생한 시점의 빌드 로그를 다운로드 받을 수 있다.</p><p><img src="/images/2021-07-14-14-23-39.png"></p><p>만일, Azure DevOps 측면에서 좀 더 자세한 로그 정보를 확인하길 원한다면, Build Pipeline의 Variables에 System.Debug 를 true로 설정하고 빌드를 시도한다면, 좀 더 자세한 로그를 출력할 수 있다. </p><p><img src="/images/2021-07-14-14-29-46.png"></p><p>더 많은 정보 확인: <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/troubleshooting/review-logs?view=azure-devops">Review logs to diagnose pipeline issues</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Azure DevOps Pipeline에서 실패가 보고된다면, 가장 먼저 확인해야 하는 부분은 로그 부분일 것이다. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2021-07-14-14-19-10.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;실패한 파이프라인을 클릭</summary>
      
    
    
    
    
    <category term="Build Pipeline" scheme="https://kocssds.github.io/tags/Build-Pipeline/"/>
    
    <category term="Azure DevOps" scheme="https://kocssds.github.io/tags/Azure-DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://kocssds.github.io/2021/07/12/hello-world/"/>
    <id>https://kocssds.github.io/2021/07/12/hello-world/</id>
    <published>2021-07-12T04:00:23.149Z</published>
    <updated>2021-07-12T04:00:23.149Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
